//1- 

class Circle {
protected:
	double radius ;
	string color ;
public:
	Circle() {
		radius = 1.0;
		color = "red";
	}
	Circle(double r) {
		radius = r;
	
	}
	Circle(double r,string c) {
		radius = r;
		color = c;
	}
	double getRadius() {
		return radius;
	}
	string getColor() {
		return color;
	}
	void setColor(string c) {
		color = c;
	}
	double getArea() {
		return 3.14*radius*radius;
	}

};

class Cylander :public Circle {
private:
	double height;
public:
	Cylander (){

	}
	Cylander (double r):Circle(r){

	}
	Cylander (double r,double h):Circle(r){
		height = h;
	}
	Cylander (double r,double h,string c):Circle(r,c){
		height = h;
	}
	double getHeight() {
		return height;
	}
	void setHeight(double h) {
		 height=h;
	}
	double getVolume() {
		return getArea() * height;
	}

};
int main() {
	Cylander c1(5,10,"mo");
	cout << c1.getVolume();

}

//2-
class MyPoint {
private:
	int x;
	int y;
public:
	MyPoint() {
		this->x = 0;
		this->y = 0;
	}
	MyPoint(int x, int y) {
		this->x = x;
		this->y = y;
	}
	int getX() {
		return this->x;
	}
	int getY() {
		return this->y;
	}
	void setX(int x) {
		this->x = x;
	}
	void setY(int y) {
		this->y = y;
	}

};
class MyLine {
private:
	MyPoint start;
	MyPoint end;
public :
	MyLine() {
		

	}
	MyLine(int x1,int x2,int y1,int y2) {
		this->start = { x1,x2 };
		this->end = { y1,y2 };

	}
	MyLine(MyPoint p1,MyPoint p2) {
		this->start = p1;
		this->end = p2;

	}
	//getter
	MyPoint getStart() {
		return this->start;
	}
	MyPoint getEnd() {
		return this->end;
	}
	int getStartX() {
		return this->start.getX();
	}
	int getStartY() {
		return this->start.getY();
	}
	int getEndX() {
		return this->end.getX();
	}
	int getEndY() {
		return this->end.getY();
	}
	int* StartXY() {
		int arr[2] = {this->getStartX(),this->getStartY()};
		return arr;
	}
	int* endXY() {
		int arr[2] = {this->getEndX(),this->getEndY()};
		return arr;
	}
	//setter
	void setStart(MyPoint start) {
		this->start = start;
	}
	void setEnd(MyPoint end) {
		this->end = end;
	}

	void setStartX(int x) {
		this->start.setX(x);
	}
	void setStartY(int y) {
		this->start.setY(y);
	}
	void setEndX(int x) {
		this->end.setX(x);
	}
	void setEndY(int y) {
		this->end.setY(y);
	}
	void setStartXY(int x,int y) {
		this->start.setX(x);
		this->start.setY(y);
	}
	void setEndXY(int x,int y) {
		this->end.setX(x);
		this->end.setY(y);
	}
	//methods                                 4            25
	//distance between the two points d=√((x2 – x1)² + (y2 – y1)²). 
	double getLenght() {
		double pow1 = pow((double)this->end.getX() - (double)this->start.getX(), 2);
		double pow2 = pow((double)this->end.getY() - (double)this->start.getY(), 2);
		double len = sqrt(pow1 + pow2);
		return len;
	}
	//4
};
int main() {
	MyPoint m(1,1);
	MyPoint k(10,5);
	MyLine l(k, m);
	cout<<l.getLenght();
	
}
//3
class MyComplex {
private:
	double real;
	double img;
public:
	MyComplex() {
		real=0;
		 img=0;
	}
	MyComplex(double r,double i) {
		real=r;
		 img=i;
	}
	double getReal() {
		return real;
	}
	double getImg() {
		return img;
	}
	//setter
	void setImg(double i) {
		img = i;
	}
	void setReal(double r) {
		real = r;
	}
	void setValue(double r, double i) {
		real = r;
		img = i;
	}
	bool isReal() {
		if (real ==0) {
			return true;
		}
		else
			return false;

	}
	bool isImg() {
		if (img ==0) {
			return true;
		}
		else
			return false;

	}
	bool equals(double real, double imag) {
		if (real == real && img == imag)
			return true;
		else
			return false;
	}
	bool equals(MyComplex another) {
		if ((real == another.real) && (img = another.img))
			return true;
		else
			return false;
	}
	double magnitude() {
		return sqrt(real * real + img * img);
	}
	MyComplex addInto(MyComplex right) {
		real += right.real;
		img += right.img;
		return (*this);
	}
	MyComplex addNew(MyComplex right) {
		MyComplex newComplex(real + right.real, img + right.img);
		return newComplex;
	}



};
int main() {
	MyComplex c1(3.1, 7.2);
	MyComplex c2(4, 5);

	cout << "c1 = (" << c1.getReal() << ", " << c1.getImg() << ")" << endl;
	cout << "c2 = (" << c2.getReal() << ", " << c2.getImg() << ")" << endl;

	MyComplex c3 = c1.addNew(c2);
	cout << "c3 = (" << c3.getReal() << ", " << c3.getImg() << ")" << endl;

	MyComplex c4 = c1.addInto(c2);
	cout << "c4 = (" << c4.getReal() << ", " << c4.getImg() << ")" << endl;

}
//4-
class Point {
protected:
	float x;
	float y;
public:
	Point() {
		this->x = 0.0;
		this->y = 0.0;
	}
	Point(float x, float y) {
		this->x = x;
		this->y = y;
	}
	//getter
	float getX() {
		return this->x;
	}
	float getY() {
		return this->y;
	}
	float* getXY() {
		float arr[2] = { this->getX(),this->getY() };
		return arr;
	}
	//setter 
	void setX(float x) {
		this->x = x;
	}
	void setY(float y) {
		this->y = y;
	}
	void setXY(float x, float y) {
		this->x = x;
		this->y = y;
	}

};
class MovablePoint :public Point {
private:
	float speedX;
	float speedY;
public:
	MovablePoint() {
		this->speedX = 0, 0;
		this->speedY = 0, 0;
	}
	MovablePoint(float x, float y) {
		this->speedX = x;
		this->speedY = y;
	}
	MovablePoint(float x, float y, float speedX, float speedY) :Point(x, y) {
		this->speedX = x;
		this->speedY = y;
	}
	// getter
	float getspeedX() {
		return this->speedX;
	}
	float getspeedY() {
		return this->speedY;
	}
	float *getSpeed() {
		float arr[2] = {this->getspeedX(),this->getspeedY()};
		return arr;
     }
	//setter
	void setSpeedX(float x) {
		this->speedX = x;
	}
	void setSpeedY(float y) {
		this->speedY = y;
	}
	void setSpeedXY(float x, float y) {
		this->speedX = x;
		this->speedY = y;
}
	//method
	MovablePoint move() {
		setX(getX() + speedX);
		setY(getY() + speedY);
		return *this;
	}
};
int main() {
	MovablePoint p(1, 2, 3, 4);
	float arr[2] = { p.getSpeed()[0],p.getSpeed()[1]};
	cout << arr[0] << "  " << arr[1] << endl;

}
