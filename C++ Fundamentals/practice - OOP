//1-
class Ball {
private:
	float x, y, xDelta, yDelta;
	int radius;
public:
	Ball() {
		x = y = xDelta = yDelta =  0;
		radius = 0;
	}
	Ball(float x,float y,int r,float xD,float yD) {
		//scope operator
		Ball::radius = r;
		Ball::x = x;
		Ball::y = y;
		Ball::xDelta = xD;
		Ball::yDelta = yD;
	}
	//getter 
	int getRaduis() {
		return radius;
	}
	float getX() {
		return Ball::x;
	}
	float getY() {
		return Ball::y;
	}
	float getYdelta() {
		return Ball::yDelta;
	}
	float getXdelta() {
		return Ball::xDelta;
	}
	//setter
	void setRaduis(int r) {
		Ball::radius = r;
	}
	void setX(float  x) {
		Ball::x = x;
	}
	void setY(float  y) {
		Ball::y = y;
	}
	void setXdelta(float  xD) {
		Ball::xDelta = xD;
	}
	void setYdelta(float  yD) {
		Ball::yDelta =yD;
	}
	//methods
	void move(float x ,float y) {
		Ball::x+=Ball::getXdelta();
		Ball::y+=Ball::getYdelta();
	}
	void refltH() {
		Ball::setXdelta(Ball::getXdelta()*-1);
	}
	void refltV() {
		Ball::setYdelta(Ball::getYdelta()*-1);
	}
	string toString() {
		string res = "Ball[(" + to_string(Ball::getX()) + ',' + to_string(Ball::getY()) + ',' + "speed = (" + to_string(getXdelta()) + ',' + to_string(getYdelta()) + ")]";

		return res;
	}

};
int main(){
	Ball b(2.5 ,4.5, 5, 1, 2);
	cout << b.toString()<<"\n =============\n";
	b.move(b.getX(),b.getY());
	cout << b.toString();
}
//2-

#include <iostream>
#include <vector>
#include <iomanip>
#include "Circle.h"
#include <string>
#include <exception>
using namespace std;

class Employee {
protected:
	int id, age;
	string name, email;
	double salary;
public:
	Employee() {
		id = age = salary=0;
	}
	Employee(int i,int a,double s,string n,string e) {
		this->id =i;
		this->name = n;
		this->age = a;
		this->email = e;
		this->salary = s;
	}
	//setter
	void setId(int i) {
		this->id = i;
	}
	void setAge(int a) {
		this->age = a;
	}
	void setSalary(double s) {
		this->salary = s;
	}
	void setName(string n) {
		this->name = n;
	}
	void setEmail(string e) {
		this->email = e;
	}
	//getter
	int getId() {
		return id;
	}
	int getAge() {
		return age;
	}
	string getName() {
		return name;
	}
	string getEmail() {
		return email;
	}
	double getSalary() {
		return salary;
	}
	virtual void dislayInfo() {
		cout << "from parent";
	}
	virtual void calculateSalary() = 0;
};
class Manager :public Employee {
public:
	Manager() {
		this->bonus = 0;
	}
	double bonus;
	Manager(int i, int a, double s,double b, string n, string e):Employee(i,a,s,n,e) {
		this->bonus = b;
}

	//setter
	void setBonus(double b) {
		this->bonus = b;
	}//getter
	double getBonus() {
		return bonus;
	}
	//method

	void calculateSalary() {
		salary+=bonus;
		cout << salary<<endl;
	}
};
class Engineer :public Employee {
public:
	Engineer() {
		this->projectCount = 0;
	}
	int  projectCount;
	Engineer(int i, int a,int en, double s, string n, string e):Employee(i,a,s,n,e) {
		this->projectCount=en;
}

	//setter
	void setBonus(int en) {
		this->projectCount = en;
	}//getter
	int  getBonus() {
		return this->projectCount;
	}
	//method

	void calculateSalary() {
		salary +=projectCount*1000 ;
		cout << salary << endl;
	}
};

int main() {
	//int i, int a, double s,double b, string n, string e
	//int i, int a,int en, double s, string n, string e
	//int i,int a,double s,string n,string e
	//Employee emp(11, 20, 1.5, "fofa", "fo@gmail.com");
	Manager m(999, 22, 6000, 500, "mo", "mo@gmail.com");
	Engineer e(333, 22, 100, 500, "aly", "mo@gmail.com");

	m.calculateSalary();
	m.dislayInfo();
	cout <<endl<< m.getName() << endl;
	cout << "\n=============\n";
	e.calculateSalary();
	e.dislayInfo();
	cout << endl<<e.getName()<<endl;
}
