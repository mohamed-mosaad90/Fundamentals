//1-
class Circle {
private:
	double radius;
	string color;
public:
	Circle() {
		radius = 1.0;
 
	}
	Circle(double r) {
		radius = r;

	}
	Circle(double r, string c) {
		radius = r;
		color = c;
	}
	double getRadius() {
		return radius;
	}
	string getColor() {
		return color;
	}
	void setRadius(double r) {
		radius = r;
	}
	void setColor(string c) {
		color = c;
	}

	double getArea() {
		return 3.14 * radius * radius;
	}

};

int main()
{

	Circle c1(5, "red");
	cout<<c1.getArea();

}

// 2-
#include <iostream>
#include <vector>
#include <iomanip>

#include <string>
using namespace std;
#pragma once



class Employee {
private:
	int id;
	int salary;
	string firstname;
	string lastname;
public:
	Employee(int i, int s, string f, string l) {
		id = i;
		salary = s;
		firstname = f;
		lastname = l;
	}
	int getID() {
		return id;
	}
	int getSalary() {
		return salary;
	}
	string lastName() {
		return lastname;
	}
	string firstName() {
		return firstname;
	}
	void setSalary(int s) {
		salary = s;
	}
	int getAnnualSalary() {
		return salary
			* 12;
	}
	int raiseSalary(int p) {

		int percent = (salary + (salary * p * 0.01));
		return percent;
}

};
int main()
{
	Employee e1(22222, 5000, "mo", "allam");
	cout <<"%"<< e1.raiseSalary(5);
}
//3- 
class Account {
private:
	string id;
	string name;
	int balance;

public:
	Account() {
		balance = 0;

	}
	Account(string i,string n) {
		id = i;
		name = n;
	}
	Account(string i,string n,int b) {
		id = i;
		name = n;
		balance = b;
	}

	string getID() {
		return id;
	}
	string getName() {
		return name;
	}
	int getBalance() {
		return balance;
	}
	int credit(int a) {
		return balance += a;
	}
	int debit(int a) {
		if (a <= balance) {
			return balance -= a;

		}
	}

	/// <summary>
	/// ==> &another here we passed by reference, not by value(take a picture of the value when I change value just picture changed ), cause  I want the address or reference of OBJ another in memory to change the value, not the value of a copy or picture 
	/// </summary>
	int transferTo(Account &another, int a) {
		if (a <= balance) {
			balance -= a;

			another.credit(a);
			return balance;
		}
	}


};
int main()
{
	Account a1("222", "mo", 1000),a2;

	a1.transferTo(a2, 500);
	cout << "a1 =" << a1.getBalance()<<endl;
	cout << "a2 =" << a2.getBalance();
}

//4- 

class Time
{
private:

	int hour;
	int minute;
	int second;
public:
	Time() {
		hour = 0;
		minute = 0;
		second = 0;
	}	Time(int h, int m, int s) {
		hour = h;
		minute = m;
		second = s;
	}
	int getHour() {
		return hour;
	}
	int getMinute() {
		return minute;
	}
	int getSecond() {
		return second;
	}
	void setHour(int h) {
		hour = h;
	}
	void setMinute(int m) {
		minute = m;
	}
	void setSecond(int s) {
		second = s;
	}
	void setTime(int h, int m, int s) {
		hour = h;
		minute = m;
		second = s;
	}
	Time nextSecond() {
		Time t=Time(hour, minute, second);
		second++;
		if (second>=60) {
			second = 0;
			minute++;
		}
		if (minute>=60) {
			minute = 0;
			hour++;
		}
		if (hour>=24) {
			hour = 0;


		}
		return t;
	}
	Time preSecond() {
		Time t = Time(hour, minute, second);
		second--;
		if (second <= 0) {
			second = 59;
			minute--;
		}
		if (minute <= 0) {
			hour = 59;
			hour--;

		}
		if (hour = 0) {
			hour == 23;
		}

	}
};
int main() {

	Time t(23, 59, 59);
	t.nextSecond();
	cout << t.getHour() << endl;
	cout << t.getMinute() << endl;
	cout << t.getSecond() << endl;
}

